#!/usr/local/bin/Selene
-- HomeDashBoard, Selenite Curses version
--
-- Reduced dashboard to allows to controle/configure some aspect of my
-- smart home automation.
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own one

assert( SELENE_VERSION >= 4.0300, "HDB requires at least Selene v4.03.00, using " .. SELENE_VERSION )
local stitle = " Home Dashboard Control v0.4.1 (Selene v".. SELENE_VERSION ..") "

-- Debug only
--[[
require("tostring")
SelLog.init("hdb.log")
--]]

require(SELENE_SCRIPT_DIR .. "/LocalConfig")
require(SELENE_SCRIPT_DIR .. "/Helpers")

Selene.UseCurses()
pwnd = SelCurses.init()
w,h = pwnd:GetSize()

Topics = {}

pwnd:HLineAt(0,0,w,'=')
pwnd:attrset( SelCurses.CharAttrConst("REVERSE") )
pwnd:PrintAt((w-stitle:len())/2,0, stitle)
pwnd:attrset( SelCurses.CharAttrConst("NORMAL") )

pwnd:Move(0,1)
require(SELENE_SCRIPT_DIR .. "/1er")
require(SELENE_SCRIPT_DIR .. "/RDC")
require(SELENE_SCRIPT_DIR .. "/SousSol")
require(SELENE_SCRIPT_DIR .. "/Poulailler")
require(SELENE_SCRIPT_DIR .. "/Piscine")

pwnd:print("\n\n")
pwnd:HLine(w,'-')
local x,y = pwnd:GetXY()
wndMenu = pwnd:DerWin(x,y+1,w,1)
wmdSub = pwnd:DerWin(x,y+2,0,0)

-- sub windows
swinLst = {}
actWnd = nil	-- Fenetre active

require(SELENE_SCRIPT_DIR .. "/Volets")
require(SELENE_SCRIPT_DIR .. "/Consignes")
swinLst['Q'] = { titre="&Quitter", func=os.exit }

genMenu()
-- SelLog.log(universal_tostring(swinLst))

pwnd:refresh()

-- Broker's stuffs
function disconnected()
end

local Brk, err = SelMQTT.Connect( MQTT_URL, { reliable=false, clientID=MQTT_ClientID.."_"..Selene.getHostname().."_"..Selene.getPid(), OnDisconnectTrigger=disconnected } )
if err then
	print( "Broker", err )
	return
end

_, err = Brk:Subscribe( Topics )
if err then
	print( err )
	return
end

SelCurses.echo(false)
SelCurses.curs_set( SelCurses.CursorVisibilityConst("INVISIBLE") )
pwnd:keypad( true )
-- Wait for events
while true do
	ret = { Selene.WaitFor( io.stdin ) }

	for i,r in ipairs(ret) do
		if type(r) == 'function' then
			r()
		elseif type(r) == 'string' then
			print('error', r)
		elseif r == io.stdin then
			local cn = pwnd:getch()
			local c
			if cn < 128 then
				c = string.char(cn)
			end

			if cn == 127 or cn == SelCurses.Key("BACKSPACE") then -- <- pour fermer la fenetre
				if actWnd then
					actWnd.close()
				else
					SelCurses.flash()
				end
			elseif swinLst[c] ~= nil then
				if actWnd then
					actWnd.close()
				end
				actWnd = swinLst[c]
				swinLst[c].func()
			elseif actWnd ~= nil then
				if actWnd.key ~= nil then
					actWnd.key(Brk, c,cn)
				end
			end
		end
	end
end
