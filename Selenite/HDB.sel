#!/usr/local/bin/Selene
-- HomeDashBoard, Selenite version
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

-- Ensure we're not using obsolete version
assert( SELENE_VERSION >= 2.0100, "HDB requires at least Selene v2.01.00" )

Selene.UseDirectFB("--dfb:quiet,no-vt,no-cursor")

-- compatibility with newer Lua
local unpack = unpack or table.unpack

-- Hide console's cursor
local f=io.open('/sys/class/graphics/fbcon/cursor_blink', 'w')
if f then	-- working only using root access
	f:write('0')
	f:close()
end

require (SELENE_SCRIPT_DIR .. "/LocalConfig")	-- Configuration to connect to the broker
require (SELENE_SCRIPT_DIR .. "/Colors")		-- Colors used in the GUI

-- List of topics to subscribe to
function Command() -- CAUTION : in race condition, commands may be lost.
	if SelShared.get('HomeDashBoard/Tablette/Command') == 'Grab' then
		psrf:Dump('/tmp', 'DashBoard')
	elseif SelShared.get('HomeDashBoard/Tablette/Command') == 'Tasks' then
		SelShared.dump()
	end
end

Topics = {
	{ topic = "HomeDashBoard/Tablette/Command", trigger=Command }	-- 'Tablette' has to be changed if several dashboard
}

-- Init the screen
DirectFB.init( DirectFB.CooperativeConst('NORMAL') )
layer = SelLayer.GetLayer(0)	-- Get primary layer
layer:SetCooperativeLevel( SelLayer.CooperativeLevelConst('ADMINISTRATIVE') )
psrf = layer:GetSurface()
psrf:Clear( unpack(COL_BLACK) )

require (SELENE_SCRIPT_DIR .. "/Helpers")	-- Helper functions to draw data

-- GUI
winlist = {}	-- List of all windows

require (SELENE_SCRIPT_DIR .. "/Primary")
-- require (SELENE_SCRIPT_DIR .. "/RDC")
require (SELENE_SCRIPT_DIR .. "/1er")
require (SELENE_SCRIPT_DIR .. "/SousSol")
-- require (SELENE_SCRIPT_DIR .. "/Meteo")

-- Broker's stuffs
function disconnected()
	local skull,err = SelImage.create(SELENE_SCRIPT_DIR .. "/Images/Red-Skull-icon.png")
	if err then
		print (err)
	end
	skull:RenderTo( psrf, { psrf:GetWidth() - 50, 0, 50,50 } )
	SelShared.PushTask( psrfupdate )
end

local Brk, err = SelMQTT.connect( MQTT_URL, { reliable=false, clientID=MQTT_ClientID, OnDisconnectTrigger=disconnected } )
if err then
	print( "Broker", err )
	return
end

function updateTCave()
	upddata( srf_TCave, fdigit, SelShared.get('maison/Temperature/Cave') .. "°C" )
end

remaining = {
	{ topic = "maison/Temperature/Cave", trigger=updateTCave, trigger_once=true }
}

--[[
require("tostring")
print(universal_tostring(Topics))
]]

-- Subscribtion

_, err = Brk:subscribe( Topics )
if err then
	print( err )
	return
end

-- Timer for tablet figures
function updateTablet()
	local cols = {
		[1.5] = COL_GREEN,
		[2.75] = COL_ORANGE,
		[4] = COL_RED
	}

	local f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/axp20-supplyer.28/power_supply/ac/voltage_now" )
	local v = f:read('*number') / 1000000
	f:close()
	f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/axp20-supplyer.28/power_supply/ac/current_now" )
	v = v * f:read('*number') / 1000000
	f:close()
	srf_tabpwr:SetColor( findgradiancolor(v, cols ) )
	UpdDataRight( srf_tabpwr, string.format('%3.2f', v) .. ' W')
	dt_pwr:Push( v )
	local min,max = dt_pwr:MinMax()
	updgfx( srf_tpwrgfx, dt_pwr )

	cols = {
		[30] = COL_DIGIT,
		[40] = COL_ORANGE
	}
	f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/temp1_input" )
	v = f:read('*number') / 1000
	f:close()
	srf_ttpmu:SetColor( findgradiancolor(v, cols ) )
	UpdDataRight( srf_ttpmu, string.format('%3.1f', v) .. '°C')
end

local tabtimer,err = SelTimer.create { when=1, interval=5, clockid=SelTimer.ClockModeConst("CLOCK_MONOTONIC"), ifunc=updateTablet}
if err then
	print(err)
	return
end

wcnt = 0
function switchwindows()
	winlist[ (wcnt % #winlist)+1 ]:RaiseToTop()
	wcnt = wcnt + 1
end

local switchtimer,err = SelTimer.create { when=10, interval=10, clockid=SelTimer.ClockModeConst("CLOCK_MONOTONIC"), task=switchwindows}
if err then
	print(err)
	return
end

-- Wait for events
while true do
	ret, err = Selene.WaitFor(tabtimer, switchtimer)

	if type(ret) == 'function' then
		ret()
	end
end
