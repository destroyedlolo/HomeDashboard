#!../Selene/Selene --dfb:quiet,no-vt
-- HomeDashBoard, Selenite version
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

-- compatibility with newer Lua
local unpack = unpack or table.unpack

-- Ensure we're not using obsolete version
assert( SELENE_VERSION >= 0.0203, "HDB requires at least Selene v0.0203" )

-- Load configuration files
require (SELENE_SCRIPT_DIR .. "/LocalConfig")
require (SELENE_SCRIPT_DIR .. "/Colors")

-- Init the screen
Selene.init( Selene.CooperativeConst('FULLSCREEN') )
psrf = SelSurface.create { caps=SelSurface.CapabilityConst('PRIMARY') } -- create a primary surface
psrf:Clear( unpack(COL_BLACK) )

require (SELENE_SCRIPT_DIR .. "/Design")

-- Broker's stuffs
local Brk, err = SelMQTT.connect( MQTT_URL, { reliable=false, clientID=MQTT_ClientID } )

function rcvVal( topic, val )
	SelShared.set(topic, val)
	return true
end

function updateVlt()
	upddata( srf_tension, fdigit, SelShared.get('onduleur/input.voltage') .. ' V')
end

function updateConso()
	upddata( srf_consommation, fdigit, SelShared.get('TeleInfo/Consommation/values/PAPP') .. ' VA')
end

function updateProduction()
	upddata( srf_production, fdigit, SelShared.get('TeleInfo/Production/values/PAPP') .. ' VA')
end

_, err = Brk:subscribe({
	{ topic = "onduleur/input.voltage", func=rcvVal, trigger=updateVlt, trigger_once=true },
	{ topic = "TeleInfo/Consommation/values/PAPP", func=rcvVal, trigger=updateConso, trigger_once=true },
	{ topic = "TeleInfo/Production/values/PAPP", func=rcvVal, trigger=updateProduction, trigger_once=true }
})
if err then
	print( err )
	return
end

-- Wait for events
while true do
	ret, err = Selene.WaitFor()

	if type(ret) == 'function' then
		ret()
	end
end
