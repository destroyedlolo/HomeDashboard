#!../Selene/Selene --dfb:quiet,no-vt
-- HomeDashBoard, Selenite version
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

-- compatibility with newer Lua
local unpack = unpack or table.unpack

-- Hide console's cursor
local f=io.open('/sys/class/graphics/fbcon/cursor_blink', 'w')
f:write('0')
f:close()

-- Ensure we're not using obsolete version
assert( SELENE_VERSION >= 0.0203, "HDB requires at least Selene v0.0203" )

-- Load configuration files
require (SELENE_SCRIPT_DIR .. "/LocalConfig")
require (SELENE_SCRIPT_DIR .. "/Colors")

-- Init the screen
Selene.init( Selene.CooperativeConst('FULLSCREEN') )
psrf = SelSurface.create { caps=SelSurface.CapabilityConst('PRIMARY') } -- create a primary surface
psrf:Clear( unpack(COL_BLACK) )

require (SELENE_SCRIPT_DIR .. "/Design")

-- Broker's stuffs
local Brk, err = SelMQTT.connect( MQTT_URL, { reliable=false, clientID=MQTT_ClientID } )

function rcvVal( topic, val )
	SelShared.set(topic, val)
	return true
end

function updateVlt()
	upddata( srf_tension, fdigit, SelShared.get('onduleur/input.voltage') .. ' V')
end

function updateConso()
	upddata( srf_consommation, fdigit, SelShared.get('TeleInfo/Consommation/values/PAPP') .. ' VA')
end

function updateProduction()
	upddata( srf_production, fdigit, SelShared.get('TeleInfo/Production/values/PAPP') .. ' VA')
end

function updateTGN()
	upddata( srf_TGN, fdigit, SelShared.get('maison/Temperature/Grenier Nord') .. "°C" )
end

function updateTChJ()
	upddata( srf_TChJ, fdigit, SelShared.get('maison/Temperature/Chambre Joris') .. "°C" )
end

function updateTSalon()
	upddata( srf_TSalon, fdigit, SelShared.get('maison/Temperature/Salon') .. "°C" )
end

function updateTBureau()
	upddata( srf_TBureau, fdigit, SelShared.get('maison/Temperature/Bureau') .. "°C" )
end

function updateTDehors()
	upddata( srf_TDehors, fdigit, SelShared.get('maison/Temperature/Dehors') .. "°C" )
end

function updateTCave()
	upddata( srf_TCave, fdigit, SelShared.get('maison/Temperature/Cave') .. "°C" )
end

function updateUPSLd()
	local maxp = tonumber( SelShared.get('onduleur/ups.realpower.nominal') )
	if maxp then -- maximum power not known yet
		upddata( srf_consoUPS, ftitle1, string.format('%3.1f', SelShared.get('onduleur/ups.load')*maxp/100) .. ' W')
	else
		upddata( srf_consoUPS, ftitle1, SelShared.get('onduleur/ups.load') .. ' %')
	end
	local pw = bar_ups.w * SelShared.get('onduleur/ups.load') / 100
	psrf:SetColor( unpack( COL_WHITE ) )
	psrf:FillRectangle( bar_ups.x, bar_ups.y, pw, bar_ups.h )
	psrf:SetColor( unpack( COL_BLACK ) )
	psrf:FillRectangle( bar_ups.x+pw, bar_ups.y, bar_ups.w-pw, bar_ups.h )
end

_, err = Brk:subscribe({
	{ topic = "onduleur/ups.realpower.nominal", func=rcvVal },
	{ topic = "onduleur/ups.load", func=rcvVal, trigger=updateUPSLd, trigger_once=true },
	{ topic = "maison/Temperature/Grenier Nord", func=rcvVal, trigger=updateTGN, trigger_once=true },
	{ topic = "maison/Temperature/Chambre Joris", func=rcvVal, trigger=updateTChJ, trigger_once=true },
	{ topic = "maison/Temperature/Salon", func=rcvVal, trigger=updateTSalon, trigger_once=true },
	{ topic = "maison/Temperature/Bureau", func=rcvVal, trigger=updateTBureau, trigger_once=true },
	{ topic = "maison/Temperature/Dehors", func=rcvVal, trigger=updateTDehors, trigger_once=true },
	{ topic = "maison/Temperature/Cave", func=rcvVal, trigger=updateTCave, trigger_once=true },
	{ topic = "onduleur/input.voltage", func=rcvVal, trigger=updateVlt, trigger_once=true },
	{ topic = "TeleInfo/Consommation/values/PAPP", func=rcvVal, trigger=updateConso, trigger_once=true },
	{ topic = "TeleInfo/Production/values/PAPP", func=rcvVal, trigger=updateProduction, trigger_once=true }
})

if err then
	print( err )
	return
end

-- Timer for tablet figures
function updateTablet()
	local f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/axp20-supplyer.28/power_supply/ac/voltage_now" )
	local v = f:read('*number') / 1000000
	f:close()
	f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/axp20-supplyer.28/power_supply/ac/current_now" )
	v = v * f:read('*number') / 1000000
	f:close()
	upddata( srf_tabpwr, fdigit, string.format('%3.2f', v) .. ' W')

	f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/temp1_input" )
	v = f:read('*number') / 1000
	f:close()
	upddata( srf_ttpmu, fsdigit, string.format('%3.1f', v) .. '°C')

	f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/axp20-supplyer.28/power_supply/battery/temp" )
	v = f:read('*number') / 10
	f:close()
	upddata( srf_ttbat, fsdigit, string.format('%3.1f', v) .. '°C')
end

tabtimer,err = SelTimer.create { when=1, interval=5, clockid=SelTimer.ClockModeConst("CLOCK_MONOTONIC"), ifunc=updateTablet}
if err then
	print(err)
	return
end

-- Wait for events
while true do
	ret, err = Selene.WaitFor(tabtimer)

	if type(ret) == 'function' then
		ret()
	end
end
