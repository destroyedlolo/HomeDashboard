#!../Selene/Selene --dfb:quiet,no-vt
-- HomeDashBoard, Selenite version
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

-- Ensure we're not using obsolete version
assert( SELENE_VERSION >= 0.0201, "HDB requires at least Selene v0.0200" )

-- Load configuration file
require (SELENE_SCRIPT_DIR .. "/HDB_Config")

-- Broker initialisation stuffs
local Brk, err = SelMQTT.connect( MQTT_URL, { reliable=false, ClientID=MQTT_ClientID } )

-- Broker's stuffs

function rcvVal( topic, val )
	SelShared.set(topic, val)
	return true
end

function updateVlt()
	srf:SetFont( fdigit )
	srf:SetColor( 0,0,0,0 )	-- Erase previous message
	srf:FillRectangle( 20,30, fdigit:StringWidth("XXXX.XV"), fdigit:GetHeight() )
	srf:SetColor( 0xFF, 0x80, 0x00, 0xff )
	srf:DrawString(string.format('%3s', SelShared.get('onduleur/input.voltage')) .. " V", 20,30)
end

function updateConso()
	srf:SetFont( fdigit )
	srf:SetColor( 0,0,0,0 )	-- Erase previous message
	srf:FillRectangle( 20,30 + fdigit:GetHeight(), fdigit:StringWidth("XXXXXVA"), fdigit:GetHeight() )
	srf:SetColor( 0x80, 0xff, 0x80, 0xff )
	srf:DrawString(string.format('%4s', SelShared.get('TeleInfo/Consommation/values/PAPP')) .. " VA", 20,30 + fdigit:GetHeight())
end

function updateProduction()
	srf:SetFont( fdigit )
	srf:SetColor( 0,0,0,0 )	-- Erase previous message
	srf:FillRectangle( 20,35 + 2*fdigit:GetHeight(), fdigit:StringWidth("XXXX VA"), fdigit:GetHeight() )
	srf:SetColor( 0x80, 0xff, 0x80, 0xff )
	srf:DrawString(string.format('%4s', SelShared.get('TeleInfo/Production/values/PAPP')) .. " VA", 20,30 + 2*fdigit:GetHeight())
end

function updateTGN()
	srf:SetFont( fdigit )
	srf:SetColor( 0,0,0,0 )	-- Erase previous message
	srf:FillRectangle( 215, 2*ftxt:GetHeight(), fdigit:StringWidth("XXXX°C"), fdigit:GetHeight() )
	srf:SetColor( 0x80, 0xff, 0x80, 0xff )
	srf:DrawString(string.format('%4s', SelShared.get('maison/Temperature/Grenier Nord')) .. "°C", 215, 2*ftxt:GetHeight())
end

function updateTChJ()
	srf:SetFont( fdigit )
	srf:SetColor( 0,0,0,0 )	-- Erase previous message
	srf:FillRectangle( 350, 2*ftxt:GetHeight(), fdigit:StringWidth("XXXX°C"), fdigit:GetHeight() )
	srf:SetColor( 0x80, 0xff, 0x80, 0xff )
	srf:DrawString(string.format('%4s', SelShared.get('maison/Temperature/Chambre Joris')) .. "°C", 350, 2*ftxt:GetHeight())
end

function updateSalon()
	srf:SetFont( fdigit )
	srf:SetColor( 0,0,0,0 )	-- Erase previous message
	srf:FillRectangle( 215, 3*ftxt:GetHeight() + fdigit:GetHeight(), fdigit:StringWidth("XXXX°C"), fdigit:GetHeight() )
	srf:SetColor( 0x80, 0xff, 0x80, 0xff )
	srf:DrawString(string.format('%4s', SelShared.get('maison/Temperature/Salon')) .. "°C", 215, 3*ftxt:GetHeight() + fdigit:GetHeight())
end

function updateBureau()
	srf:SetFont( fdigit )
	srf:SetColor( 0,0,0,0 )	-- Erase previous message
	srf:FillRectangle( 350, 3*ftxt:GetHeight() + fdigit:GetHeight(), fdigit:StringWidth("XXXX°C"), fdigit:GetHeight() )
	srf:SetColor( 0x80, 0xff, 0x80, 0xff )
	srf:DrawString(string.format('%4s', SelShared.get('maison/Temperature/Bureau')) .. "°C", 350, 3*ftxt:GetHeight() + fdigit:GetHeight())
end

function updateDehors()
	srf:SetFont( fdigit )
	srf:SetColor( 0,0,0,0 )	-- Erase previous message
	srf:FillRectangle( 215, 4*ftxt:GetHeight() + 2*fdigit:GetHeight(), fdigit:StringWidth("XXXX°C"), fdigit:GetHeight() )
	srf:SetColor( 0x80, 0xff, 0x80, 0xff )
	srf:DrawString(string.format('%4s', SelShared.get('maison/Temperature/Dehors')) .. "°C", 215, 4*ftxt:GetHeight() + 2*fdigit:GetHeight())
end

function updateCave()
	srf:SetFont( fdigit )
	srf:SetColor( 0,0,0,0 )	-- Erase previous message
	srf:FillRectangle( 350, 4*ftxt:GetHeight() + 2*fdigit:GetHeight(), fdigit:StringWidth("XXXX°C"), fdigit:GetHeight() )
	srf:SetColor( 0x80, 0xff, 0x80, 0xff )
	srf:DrawString(string.format('%4s', SelShared.get('maison/Temperature/Cave')) .. "°C", 350, 4*ftxt:GetHeight() + 2*fdigit:GetHeight())
end

_, err = Brk:subscribe( {
	{ topic = "maison/Temperature/Grenier Nord", func=rcvVal, trigger=updateTGN, trigger_once=true },
	{ topic = "maison/Temperature/Chambre Joris", func=rcvVal, trigger=updateTChJ, trigger_once=true },
	{ topic = "maison/Temperature/Salon", func=rcvVal, trigger=updateSalon, trigger_once=true },
	{ topic = "maison/Temperature/Bureau", func=rcvVal, trigger=updateBureau, trigger_once=true },
	{ topic = "maison/Temperature/Dehors", func=rcvVal, trigger=updateDehors, trigger_once=true },
	{ topic = "maison/Temperature/Cave", func=rcvVal, trigger=updateCave, trigger_once=true },
	{ topic = "onduleur/input.voltage", func=rcvVal, trigger=updateVlt, trigger_once=true },
	{ topic = "TeleInfo/Consommation/values/PAPP", func=rcvVal, trigger=updateConso, trigger_once=true },
	{ topic = "TeleInfo/Production/values/PAPP", func=rcvVal, trigger=updateProduction, trigger_once=true }
})
if err then
	print( err )
	return
end

-- Init the screen
Selene.init( Selene.CooperativeConst('FULLSCREEN') )
srf = SelSurface.create { caps=SelSurface.CapabilityConst('PRIMARY') } -- create a primary surface
local sw,sh = srf:GetSize()	-- Retrieve its size
srf:Clear(0,0,0,0)
ftxt = SelFont.create("/usr/local/fonts/corpuscare_light.ttf", { height=25} )
fdigit = SelFont.create("/usr/local/fonts/corpuscare_light.ttf", { height=60} )

srf:SetFont( ftxt )
srf:SetColor( 0x00, 0x20, 0xff, 0x00)
srf:DrawString("Salon :", 15,0)
srf:DrawString("Temperature :", 215,0)

srf:DrawLine( 200, 0, 200, sh )

srf:SetColor( 0x40, 0xff, 0x40, 0x00 );
srf:DrawString("Grenier Nord :", 215, ftxt:GetHeight() )
srf:DrawString("Chambre Joris :", 350, ftxt:GetHeight() )
srf:DrawString("Salon :", 215, 2*ftxt:GetHeight() + fdigit:GetHeight() )
srf:DrawString("Bureau :", 350, 2*ftxt:GetHeight() + fdigit:GetHeight() )
srf:DrawString("Dehors :", 215, 3*ftxt:GetHeight() + 2*fdigit:GetHeight() )
srf:DrawString("Cave :", 350, 3*ftxt:GetHeight() + 2*fdigit:GetHeight() )

-- Wait for events
while true do
	ret, err = Selene.WaitFor()

	if type(ret) == 'function' then
		ret()
	end
end
