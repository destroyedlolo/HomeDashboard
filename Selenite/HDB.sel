#!../Selene/Selene --dfb:quiet,no-vt
-- HomeDashBoard, Selenite version
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

-- compatibility with newer Lua
local unpack = unpack or table.unpack

-- Hide console's cursor
local f=io.open('/sys/class/graphics/fbcon/cursor_blink', 'w')
if f then	-- working only using root access
	f:write('0')
	f:close()
end

-- Ensure we're not using obsolete version
assert( SELENE_VERSION >= 0.0700, "HDB requires at least Selene v0.07.00" )

-- Load configuration files
require (SELENE_SCRIPT_DIR .. "/LocalConfig")	-- Configuration to connect to the broker
require (SELENE_SCRIPT_DIR .. "/Colors")		-- Colors used in the GUI

-- List of topics to subscribe to
function Command() -- CAUTION : in race condition, commands may be lost.
	if SelShared.get('HomeDashBoard/Tablette/Command') == 'Grab' then
		psrf:Dump('/tmp', 'DashBoard')
	elseif SelShared.get('HomeDashBoard/Tablette/Command') == 'Tasks' then
		SelShared.dump()
	end
end

function fCommand(topic, val)
print("func")
print('"'..val..'"')
	if val == 'Grab' then
		print('Grab')
	else
		print('different')
	end
end

Topics = {
	{ topic = "HomeDashBoard/Tablette/Command", xfunc=fCommand, trigger=Command }	-- 'Tablette' has to be changed if several dashboard
}

-- Init the screen
Selene.init( Selene.CooperativeConst('FULLSCREEN') )
psrf = SelSurface.create { caps=SelSurface.CapabilityConst('PRIMARY') } -- create a primary surface
psrf:Clear( unpack(COL_BLACK) )

require (SELENE_SCRIPT_DIR .. "/Helpers")	-- Helper functions to draw data

-- GUI
require (SELENE_SCRIPT_DIR .. "/Primary")

-- Broker's stuffs
local Brk, err = SelMQTT.connect( MQTT_URL, { reliable=false, clientID=MQTT_ClientID } )

function updateTComble()
	upddata( srf_TComble, fsdigit, SelShared.get('maison/Temperature/Comble') .. "°C" )
end

function updateTGrN()
	upddata( srf_TGrN, fsdigit, SelShared.get('maison/Temperature/Grenier Nord') .. "°C" )
end

function updateTChO()
	upddata( srf_TChO, fdigit, SelShared.get('maison/Temperature/Chambre Oceane') .. "°C" )
end

function updateTChJ()
	upddata( srf_TChJ, fdigit, SelShared.get('maison/Temperature/Chambre Joris') .. "°C" )
end

function updateTSalon()
	local v = SelShared.get('maison/Temperature/Salon')
	srf_TSalon:SetColor( findgradiancolor(v, cols_temperature ) )

	upddata( srf_TSalon, fdigit, v .. "°C" )
end

function updateTBureau()
	upddata( srf_TBureau, fdigit, SelShared.get('maison/Temperature/Bureau') .. "°C" )
end

function updateTDehors()
	upddata( srf_TDehors, fdigit, SelShared.get('maison/Temperature/Dehors') .. "°C" )
end

function updateTCave()
	upddata( srf_TCave, fdigit, SelShared.get('maison/Temperature/Cave') .. "°C" )
end

function upd0Icn()
	updmeteo3H( 1, SelShared.get('Meteo3H/Nonglard/0/weather/code' ) )
end

function upd0time()
	updtime(0)
end

function upd0temp()
	updtemp(0)
end

function upd0winds()
	updwinds(0)
end

function upd0windd()
	updwindd(0)
end

function upd1Icn()
	updmeteo3H( 2, SelShared.get('Meteo3H/Nonglard/1/weather/code' ) )
end

function upd1time()
	updtime(1)
end

function upd1temp()
	updtemp(1)
end

function upd1winds()
	updwinds(1)
end

function upd1windd()
	updwindd(1)
end

function upd2Icn()
	updmeteo3H( 3, SelShared.get('Meteo3H/Nonglard/2/weather/code' ) )
end

function upd2time()
	updtime(2)
end

function upd2temp()
	updtemp(2)
end

function upd2winds()
	updwinds(2)
end

function upd2windd()
	updwindd(2)
end

function upd3Icn()
	updmeteo3H( 4, SelShared.get('Meteo3H/Nonglard/3/weather/code' ) )
end

function upd3time()
	updtime(3)
end

function upd3temp()
	updtemp(3)
end

function upd3winds()
	updwinds(3)
end

function upd3windd()
	updwindd(3)
end

function updated0Icn()
	updmeteo( 1, SelShared.get('Meteo/Nonglard/1/weather/code' ) )
end

function updated0time()
	updatetime(1)
end

function updated0tmax()
	updatedtmax(1)
end

function updated0tmin()
	updatedtmin(1)
end

function updated1Icn()
	updmeteo( 2, SelShared.get('Meteo/Nonglard/2/weather/code' ) )
end

function updated1time()
	updatetime(2)
end

function updated1tmax()
	updatedtmax(2)
end

function updated1tmin()
	updatedtmin(2)
end

function updated2Icn()
	updmeteo( 3, SelShared.get('Meteo/Nonglard/3/weather/code' ) )
end

function updated2time()
	updatetime(3)
end

function updated2tmax()
	updatedtmax(3)
end

function updated2tmin()
	updatedtmin(3)
end

function updated3Icn()
	updmeteo( 4, SelShared.get('Meteo/Nonglard/4/weather/code' ) )
end

function updated3time()
	updatetime(4)
end

function updated3tmax()
	updatedtmax(4)
end

function updated3tmin()
	updatedtmin(4)
end

function updated4Icn()
	updmeteo( 5, SelShared.get('Meteo/Nonglard/5/weather/code' ) )
end

function updated4time()
	updatetime(5)
end

function updated4tmax()
	updatedtmax(5)
end

function updated4tmin()
	updatedtmin(5)
end

remaining = {
	{ topic = "Meteo3H/Nonglard/0/weather/code", trigger=upd0Icn, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/0/time", trigger=upd0time, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/0/temperature", trigger=upd0temp, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/0/wind/speed", trigger=upd0winds, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/0/wind/direction", trigger=upd0windd, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/1/weather/code", trigger=upd1Icn, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/1/time", trigger=upd1time, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/1/temperature", trigger=upd1temp, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/1/wind/speed", trigger=upd1winds, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/1/wind/direction", trigger=upd1windd, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/2/weather/code", trigger=upd2Icn, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/2/time", trigger=upd2time, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/2/temperature", trigger=upd2temp, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/2/wind/speed", trigger=upd2winds, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/2/wind/direction", trigger=upd2windd, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/3/weather/code", trigger=upd3Icn, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/3/time", trigger=upd3time, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/3/temperature", trigger=upd3temp, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/3/wind/speed", trigger=upd3winds, trigger_once=true },
	{ topic = "Meteo3H/Nonglard/3/wind/direction", trigger=upd3windd, trigger_once=true },
	{ topic = "Meteo/Nonglard/1/weather/code", trigger=updated0Icn, trigger_once=true },
	{ topic = "Meteo/Nonglard/2/weather/code", trigger=updated1Icn, trigger_once=true },
	{ topic = "Meteo/Nonglard/3/weather/code", trigger=updated2Icn, trigger_once=true },
	{ topic = "Meteo/Nonglard/4/weather/code", trigger=updated3Icn, trigger_once=true },
	{ topic = "Meteo/Nonglard/5/weather/code", trigger=updated4Icn, trigger_once=true },
	{ topic = "Meteo/Nonglard/1/time", trigger=updated0time, trigger_once=true },
	{ topic = "Meteo/Nonglard/2/time", trigger=updated1time, trigger_once=true },
	{ topic = "Meteo/Nonglard/3/time", trigger=updated2time, trigger_once=true },
	{ topic = "Meteo/Nonglard/4/time", trigger=updated3time, trigger_once=true },
	{ topic = "Meteo/Nonglard/5/time", trigger=updated4time, trigger_once=true },
	{ topic = "Meteo/Nonglard/1/temperature/day", trigger=updated0tmax, trigger_once=true },
	{ topic = "Meteo/Nonglard/2/temperature/day", trigger=updated1tmax, trigger_once=true },
	{ topic = "Meteo/Nonglard/3/temperature/day", trigger=updated2tmax, trigger_once=true },
	{ topic = "Meteo/Nonglard/4/temperature/day", trigger=updated3tmax, trigger_once=true },
	{ topic = "Meteo/Nonglard/5/temperature/day", trigger=updated4tmax, trigger_once=true },
	{ topic = "Meteo/Nonglard/1/temperature/night", trigger=updated0tmin, trigger_once=true },
	{ topic = "Meteo/Nonglard/2/temperature/night", trigger=updated1tmin, trigger_once=true },
	{ topic = "Meteo/Nonglard/3/temperature/night", trigger=updated2tmin, trigger_once=true },
	{ topic = "Meteo/Nonglard/4/temperature/night", trigger=updated3tmin, trigger_once=true },
	{ topic = "Meteo/Nonglard/5/temperature/night", trigger=updated4tmin, trigger_once=true },
	{ topic = "maison/Temperature/Comble", trigger=updateTComble, trigger_once=true },
	{ topic = "maison/Temperature/Grenier Nord", trigger=updateTGrN, trigger_once=true },
	{ topic = "maison/Temperature/Chambre Oceane", trigger=updateTChO, trigger_once=true },
	{ topic = "maison/Temperature/Chambre Joris", trigger=updateTChJ, trigger_once=true },
	{ topic = "maison/Temperature/Salon", trigger=updateTSalon, trigger_once=true },
	{ topic = "maison/Temperature/Bureau", trigger=updateTBureau, trigger_once=true },
	{ topic = "maison/Temperature/Dehors", trigger=updateTDehors, trigger_once=true },
	{ topic = "maison/Temperature/Cave", trigger=updateTCave, trigger_once=true }
}

--[[
require("tostring")
print(universal_tostring(Topics))
]]

-- Subscribtion

_, err = Brk:subscribe( Topics )
if err then
	print( err )
	return
end

-- Timer for tablet figures
function updateTablet()
	local cols = {
		[1.5] = COL_GREEN,
		[2.75] = COL_ORANGE,
		[4] = COL_RED
	}

	local f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/axp20-supplyer.28/power_supply/ac/voltage_now" )
	local v = f:read('*number') / 1000000
	f:close()
	f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/axp20-supplyer.28/power_supply/ac/current_now" )
	v = v * f:read('*number') / 1000000
	f:close()
	srf_tabpwr:SetColor( findgradiancolor(v, cols ) )
	UpdDataRight( srf_tabpwr, string.format('%3.2f', v) .. ' W')
	dt_pwr:Push( v )
	local min,max = dt_pwr:MinMax()
	updgfx( srf_tpwrgfx, dt_pwr )

	cols = {
		[30] = COL_DIGIT,
		[40] = COL_ORANGE
	}
	f = io.open( "/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/temp1_input" )
	v = f:read('*number') / 1000
	f:close()
	srf_ttpmu:SetColor( findgradiancolor(v, cols ) )
	UpdDataRight( srf_ttpmu, string.format('%3.1f', v) .. '°C')
end

tabtimer,err = SelTimer.create { when=1, interval=5, clockid=SelTimer.ClockModeConst("CLOCK_MONOTONIC"), ifunc=updateTablet}
if err then
	print(err)
	return
end

-- Wait for events
while true do
	ret, err = Selene.WaitFor(tabtimer)

	if type(ret) == 'function' then
		ret()
	end
end
