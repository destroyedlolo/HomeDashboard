#!../Selene/Selene --dfb:quiet,no-vt
-- HomeDashBoard, Selenite version
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

-- Ensure we're not using obsolete version
assert( SELENE_VERSION >= 0.0201, "HDB requires at least Selene v0.0200" )

-- Load configuration file
require (SELENE_SCRIPT_DIR .. "/HDB_Config")

-- Broker initialisation stuffs
local Brk, err = SelMQTT.connect( MQTT_URL, { reliable=false, ClientID=MQTT_ClientID } )

-- Broker's stuffs

function rcvTSalon( topic, val )	-- Receiving temperature
	SelShared.set('Salon', val)
	return true
end

function updateSalon()
end

_, err = Brk:subscribe( { 
	{ topic = "maison/Temperature/Salon", func=rcvTSalon, trigger=updateSalon, trigger_once=true }
})
if err then
	print( err )
	return
end

-- Init the screen
Selene.init( Selene.CooperativeConst('FULLSCREEN') )
local srf = SelSurface.create { caps=SelSurface.CapabilityConst('PRIMARY') } -- create a primary surface
local w,h = srf:GetSize()	-- Retrieve its size
srf:FillRectangle(0,0, w,h)
local ftxt = SelFont.create("/usr/local/fonts/corpuscare_light.ttf", { height=20, width=15} )


srf:SetFont( ftxt )
srf:SetColor( 0x80, 0xff, 0x80, 0xff );
srf:DrawString("This is a test", 15,20)

-- Waiting loop
while true do
	print "Hit 'enter' key to dump, 'q' so exit"
	local s=io.stdin:read'*l'	-- wait for enter
	if s=='q' then
		break
	end
	SelShared.dump()
end

ftxt:destroy()
srf:destroy()
