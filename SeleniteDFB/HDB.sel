#!/usr/local/bin/Selene
-- HomeDashBoard, Selenite version
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

--	Compatibility with newer Lua
unpack = unpack or table.unpack

-- initialise graphical environment
Selene.UseDirectFB("--dfb:quiet,no-vt,no-cursor")

require (SELENE_SCRIPT_DIR .. "/LocalConfig")	-- Local configuration
require "Toile"

Topics = {}	-- Topics we are looking for

-- Hide console's cursor
-- need the current user to be part of tty group
local f = io.open("/dev/tty1", "w")
if f then
	f:write('\27[?17;0;0c')
	f:close()
end

-- Global objects
winlist = {}		-- List of all windows
condlisttmr = {}	-- List of all timers for conditions

-- Loading modules
local info = debug.getinfo(1,'S');
local whereiam = string.match(info.source, "@(.-)([^\\/]-%.?([^%.\\/]*))$")
if psrf:GetSize() == 320 then	-- small display
	loaddir(whereiam, 'HDB_320')
else
	loaddir(whereiam, 'HDB')
end


SelLog.log("Let's go ...")

-- List of topics to subscribe to
function Command() -- CAUTION : in race condition, commands may be lost.
	if SelShared.get('HomeDashBoard/Tablette/Command') == 'Grab' then
		psrf:Dump('/tmp', 'DashBoard')
	elseif SelShared.get('HomeDashBoard/Tablette/Command') == 'Tasks' then
		SelShared.dump()
	elseif SelShared.get('HomeDashBoard/Tablette/Command') == 'Topics' then
		for _,v in ipairs(Topics) do
			print(_,v.topic)
		end
	end
end

table.insert( Topics, 
	{ topic = "HomeDashBoard/Tablette/Command", trigger=Command }	-- 'Tablette' has to be changed if several dashboard
)


-- Broker's stuffs
function disconnected()
	print('Deconnecté')
end

local Brk, err = SelMQTT.connect( MQTT_URL, { reliable=false, clientID=MQTT_ClientID, OnDisconnectTrigger=disconnected } )
if err then
	print( "Broker", err )
	return
end

-- Subscribtion
_, err = Brk:subscribe( Topics )
if err then
	print( "Subscribtion", err )
	return
end

Notification.Log( "Séléné : ".. string.format("%.4f", SELENE_VERSION) )
Notification.Log( "Toile : ".. string.format("%.4f", TOILE_VERSION) )
Notification.setColor( COL_WHITE )

-- Wait for events
while true do -- Main todo list handler
	ret, err = Selene.WaitFor( animTimer.getTimer(), unpack( condlisttmr ) )
	if err then
		print(err)
		return
	end

	if type(ret) == 'function' then
		ret()
	end
end
