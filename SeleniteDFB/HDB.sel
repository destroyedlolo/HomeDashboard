#!/usr/local/bin/Selene
-- HomeDashBoard, Selenite version
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

-- Ensure we're not using obsolete version
assert( SELENE_VERSION >= 2.0100, "HDB requires at least Selene v2.01.00" )

-- compatibility with newer Lua
local unpack = unpack or table.unpack

-- initialise graphical environment
Selene.UseDirectFB("--dfb:quiet,no-vt,no-cursor")

require (SELENE_SCRIPT_DIR .. "/LocalConfig")	-- Local configuration

Topics = {}	-- Topics we are looking for

-- Hide console's cursor
local f=io.open('/sys/class/graphics/fbcon/cursor_blink', 'w')
if f then	-- working only using root access
	f:write('0')
	f:close()
end

-- modules helpers
lfs = require "lfs" -- LuaFileSystem

function loaddir( dir )
	local t={}

	for f in lfs.dir(dir) do
		local attr = lfs.attributes( dir ..'/'.. f )
		local found, len, res = f:find("^(.*)%.[^%.]*$")
		if found and attr.mode == 'file' and res:sub(1,1) ~= '.' and f:match("^.+(%..+)$") ~= '.md' then
			table.insert( t, res )
		end
	end

	table.sort(t)

	for _,res in ipairs( t ) do
		require(dir ..'/'.. res)
		SelLog.log("*L* " .. dir ..'/'.. res .. ' loaded')
	end
end


-- load modules
loaddir('Supports')
loaddir('Inputs')
loaddir('Gfx')
loaddir('IHM')

SelLog.log("Let's go ...")

-- List of topics to subscribe to
function Command() -- CAUTION : in race condition, commands may be lost.
	if SelShared.get('HomeDashBoard/Tablette/Command') == 'Grab' then
		psrf:Dump('/tmp', 'DashBoard')
	elseif SelShared.get('HomeDashBoard/Tablette/Command') == 'Tasks' then
		SelShared.dump()
	elseif SelShared.get('HomeDashBoard/Tablette/Command') == 'Topics' then
		for _,v in ipairs(Topics) do
			print(_,v.topic)
		end
	end
end

table.insert( Topics, 
	{ topic = "HomeDashBoard/Tablette/Command", trigger=Command }	-- 'Tablette' has to be changed if several dashboard
)


-- Broker's stuffs
function disconnected()
	print('Deconnect√©')
end

local Brk, err = SelMQTT.connect( MQTT_URL, { reliable=false, clientID=MQTT_ClientID, OnDisconnectTrigger=disconnected } )
if err then
	print( "Broker", err )
	return
end

-- Subscribtion
_, err = Brk:subscribe( Topics )
if err then
	print( "Subscribtion", err )
	return
end

-- Wait for events
while true do -- Main todo list handler
	ret, err = Selene.WaitFor( )
	if err then
		print(err)
		return
	end

	if type(ret) == 'function' then
		ret()
	end
end
